name: Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - master

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2

    - name: Install deps
      run: python -m pip install twine build

    - name: Build SDist
      run: python -m build -s

    - name: Check metadata
      run: twine check dist/*

    - uses: actions/upload-artifact@v2
      with:
        name: sdist
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # windows-latest,

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Checkout MOOS source
      uses: actions/checkout@v2
      with:
        repository: 'russkel/core-moos'
        path: '${{ github.workspace }}/core-moos'

    - name: 'Run CMake'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/core-moos/CMakeLists.txt'
        buildDirectory: '${{ github.workspace }}/core-moos/build'
        cmakeBuildType: 'Release'
        buildWithCMake: true
        cmakeAppendedArgs: '-DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON'

    - name: Install MOOS
      run: |
        cd ${{ github.workspace }}/core-moos/build
        cmake --install . --prefix ${{ github.workspace }}/.local/
        echo "PATH=$PATH:${{ github.workspace }}/.local/bin" >> $GITHUB_ENV

    - name: Create setup.cfg
      if: matrix.os == 'macos-latest'
      run: |
        echo "[build_ext]" >> setup.cfg
        echo "include_dirs=${{ github.workspace }}/.local/include" >> setup.cfg
        echo "library_dirs=${{ github.workspace }}/.local/lib" >> setup.cfg
        cat setup.cfg

    # linux cibuildwheel uses a docker image - it maps workspace to /project
    - name: Create setup.cfg
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "[build_ext]" >> setup.cfg
        echo "include_dirs=/project/.local/include" >> setup.cfg
        echo "library_dirs=/project/moosbuild/lib" >> setup.cfg
        cat setup.cfg

    - name: Build wheel
      if: matrix.os == 'ubuntu-latest'
      uses: pypa/cibuildwheel@v2.7.0
      env:
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_MANYLINUX_I686_IMAGE: manylinux2014
        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        CIBW_ARCHS_LINUX: "auto aarch64"
        CIBW_BEFORE_ALL: |
          mkdir moosbuild;
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON /project/core-moos/;
          make;
          make install;
        CIBW_SKIP: pp*
        CIBW_TEST_SKIP: "*"

    - name: Build MacOS Wheels
      uses: pypa/cibuildwheel@v2.7.0
      if: matrix.os == 'macos-latest'
      env:
        CIBW_SKIP: pp*
        CIBW_TEST_SKIP: "*"

    - name: Show files
      run: ls -lh wheelhouse
      shell: bash

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: wheelhouse/*.whl


  release:
    needs: ['build_wheels', 'build_sdist']
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wheels
        path: dist

    - uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist

    - uses: olegtarasov/get-tag@v2.1
      id: tagName

    - name: Create Release
      id: create_release
      uses: "marvinpinto/action-automatic-releases@v1.2.1"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        draft: true
        prerelease: false
        title: pymoos ${{ steps.tagName.outputs.tag }}
        files: |
          dist/*.whl
          dist/*.tar.gz
